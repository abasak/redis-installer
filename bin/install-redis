#!/usr/bin/env bash
#
# Author:  Wayne E. Seguin <wayneeseguin@gmail.com>
# License: The same licence as Redis, New BSD
#          http://www.opensource.org/licenses/bsd-license.php
#
default_redis_version=1.2.5

# Emit usage information to the user.
usage() {
  echo -e "$0 [--version $default_redis_version] [--prefix /usr/local]"
}

#
# Parse any CLI arguments.
#
while true ; do
  case "$1" in
    -h|--help|-\?) usage      ; exit 0 ;;
    --verbose)     verbose=1  ; shift  ;;
    --trace)       set -x     ; shift  ;;
    --version)     version=$1 ; shift  ;;
    --prefix)      prefix=$1  ; shift  ;;
    --)            shift      ; break  ;;
    -*)            echo "invalid option: $1" 1>&2 ; usage ; exit 1;;
    *)             break               ;;
  esac
done

#
# Configuration Defaults
#
package="redis"
version="${version:-"$default_redis_version"}"
archive_format="tar.gz"
timestamp=$(date +%m.%d.%YT%H:%M:%S)
result=0

# Alternate configuration based on root/user install.
if [[ "root"  = "$(whoami)" ]] ; then
  prefix="${prefix:-/usr/local}"
  install_path="$prefix"
  source_path="$prefix/src"
  useradd -r redis 2>/dev/null # If the user already exists we don't want to hear about it.
  directories="/etc/redis /var/log/redis /var/run/redis /data/redis"
  user="redis"
else
  prefix="${prefix:-$HOME}"
  install_path="$prefix"
  source_path="$prefix/.src"
  directories="$HOME/.redis/log $HOME/.redis/data $HOME/.redis/pids"
  user="$(whoami)"
fi

# Ensure that the source path exists, then switch to it to work out of.
mkdir -p $source_path && cd $source_path

#
# Fetch the Redis tarball
#
echo -e "Downloading  ${package}-${version}.${archive_format} ..."
curl -O -L http://redis.googlecode.com/files/${package}-${version}.${archive_format}
result=$? ; if [[ "$result" -gt 0 ]] ; then
  echo -e "ERROR: ${package}-${version}.${archive_format} failed to download."
  exit 1
fi

#
# Extract the Redis tarball
#
echo -e "Extracting ${package} ${version} ..."
tar zxf ${package}-${version}.${archive_format}
result=$? ; if [[ "$result" -gt 0 ]] ; then
  echo -e "ERROR: ${package}-${version}.${archive_format} failed to extract."
  exit 1
fi
cd ${package}-${version}

#
# Compile redis-server, redis-cli
#
echo -e "Compiling ${package} ${version} ..."
make
result=$? ; if [[ "$result" -gt 0 ]] ; then
  echo -e "ERROR: ${package}-${version} failed to compile."
  exit 1
fi

#
# Install redis-server, redis-cli to $prefix
#
echo -e "Installing ${package} ${version} ..."
cp -f redis-server ${install_path}/bin/ && cp redis-cli ${install_path}/bin/
result=$? ; if [[ "$result" -gt 0 ]] ; then
  echo -e "ERROR: ${package}-${version} failed to install."
  exit 1
fi

#
# Ensure that redis related directories exist.
#
echo -e "Creating directories ${package} ${version} ..."
if [[ "$result" -eq 0 ]] ; then
  for directory in $directories ; do
    mkdir -p $directory
    chown -R $user $directory
  done
fi

exit $result
